{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","className","map","todo","cn","completed","htmlFor","type","name","checked","title","onClick","userId","id","BASE_URL","CurrentUser","state","user","isUserDataExist","this","loadUserInfo","prevProps","props","a","fetch","then","response","json","setState","email","phone","clearUser","React","Component","App","selectedUserId","filterByTitle","selectedStatus","handleChange","event","target","value","prevState","filteredTodos","filter","includes","onChange","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.010d2c11.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectUser }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map((todo) => {\n          return (\n            <li\n              key={todo.id}\n              className={cn(\n                'TodoList__item ',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label htmlFor=\"status\">\n                <input type=\"checkbox\" name=\"status\" checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={cn('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected': !todo.completed,\n                })}\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                {`User#${todo.userId}`}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/Todos`).then((response) => response.json());\n}\n\nexport function getUser(id: number) {\n  return fetch(`${BASE_URL}/users/${id}`).then((response) => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\ninterface State {\n  user: User | null;\n  isUserDataExist: boolean;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    isUserDataExist: true,\n  };\n\n  componentDidMount() {\n    this.loadUserInfo();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserInfo();\n    }\n  }\n\n  async loadUserInfo() {\n    try {\n      const user = await getUser(this.props.userId);\n\n      this.setState({ user, isUserDataExist: true });\n    } catch (error) {\n      this.setState({ isUserDataExist: false });\n    }\n  }\n\n  render() {\n    const { user, isUserDataExist } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && isUserDataExist ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user?.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={this.props.clearUser}\n            >\n              Clear\n            </button>\n          </>\n        ) : (\n          <p>User is not exist</p>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  filterByTitle: string;\n  selectedStatus: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    filterByTitle: '',\n    selectedStatus: '',\n  };\n\n  componentDidMount() {\n    getTodos().then((todos) => {\n      this.setState({ todos });\n    });\n  }\n\n  handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  getFilteredTodos() {\n    const { todos, filterByTitle, selectedStatus } = this.state;\n\n    let filteredTodos = todos.filter((todo) => todo.title.includes(filterByTitle));\n\n    if (selectedStatus === 'completed') {\n      filteredTodos = filteredTodos.filter((todo) => todo.completed);\n    }\n\n    if (selectedStatus === 'active') {\n      filteredTodos = filteredTodos.filter((todo) => !todo.completed);\n    }\n\n    return filteredTodos;\n  }\n\n  selectUser = (userId: number) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, selectedStatus } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <input\n            type=\"text\"\n            value={this.state.filterByTitle}\n            name=\"filterByTitle\"\n            onChange={this.handleChange}\n          />\n          <select\n            name=\"selectedStatus\"\n            value={selectedStatus}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"active\">Active</option>\n          </select>\n          <TodoList\n            todos={this.getFilteredTodos()}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearUser={this.clearUser} />\n            ) : (\n              'No user selected'\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}